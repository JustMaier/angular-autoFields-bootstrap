/**
 * @license Autofields v2.2.6
 * (c) 2019 Justin Maier http://justmaier.github.io/angular-autoFields-bootstrap
 * License: MIT
 */
"use strict"; angular.module("autofields.bootstrap", ["autofields.standard", "ui.bootstrap"]).config(["$autofieldsProvider", function (e) { e.settings.classes.container.push("form-group"), e.settings.classes.input.push("form-control"), e.settings.classes.label.push("control-label"), e.registerHandler("checkbox", function (t, s, n) { var o = e.field(t, s, "<input/>"); return o.label && o.label.prepend(o.input), o.input.removeClass("form-control"), o.fieldContainer }), e.settings.dateSettings = { datepickerPopup: "MMMM dd, yyyy" }, e.settings.scope.datepickerOptions = { showWeeks: !1 }, e.settings.scope.openCalendar = function (e, t, s) { s.preventDefault(), s.stopPropagation(), e[t] = !e[t] }, e.registerHandler("date", function (t, s, n) { var o = { type: "text", uibDatepickerPopup: s.datepickerPopup ? s.datepickerPopup : t.options.dateSettings.datepickerPopup, datepickerOptions: t.options.datepickerOptions || "datepickerOptions", isOpen: "$property_cleanOpen" }; return s.attr && 1 == s.attr.disabled || (s.$addons = [{ button: !0, icon: "glyphicon glyphicon-calendar", attr: { ngClick: 'openCalendar("$property_cleanOpen",$event)' } }]), e.field(t, s, "<input/>", o).fieldContainer }), e.registerHandler("static", function (t, s, n) { s.showWeeks ? s.showWeeks : t.options.dateSettings.showWeeks, s.datepickerPopup ? s.datepickerPopup : t.options.dateSettings.datepickerPopup; var o = e.field(t, s, "<p/>"), a = angular.element("<p/>"); return a.attr("ng-bind", o.input.attr("ng-model")), a.addClass("form-control-static"), o.input.replaceWith(a), o.fieldContainer }), e.settings.classes.row = e.settings.classes.row || [], e.settings.classes.row.push("row"), e.settings.classes.col = e.settings.classes.col || [], e.settings.classes.col.push("col-sm-$size"), e.settings.classes.colOffset = e.settings.classes.colOffset || [], e.settings.classes.colOffset.push("col-sm-offset-$size"), e.registerHandler("multiple", function (t, s, n) { var o = angular.element("<div/>"); return o.addClass(t.options.classes.row.join(" ")), angular.forEach(s.fields, function (n, a) { var i = angular.element("<div/>"), l = "multiple" != n.type && n.columns || s.columns; i.addClass(t.options.classes.col.join(" ").replace(/\$size/g, l)), i.append(e.createField(t, n, a)), o.append(i) }), o }), e.settings.classes.helpBlock = e.settings.classes.helpBlock || [], e.settings.classes.helpBlock.push("help-block"), e.registerMutator("helpBlock", function (e, t, s) { return t.help ? (s.helpBlock = angular.element("<p/>"), s.helpBlock.addClass(e.options.classes.helpBlock.join(" ")), s.helpBlock.html(t.help), s.fieldContainer.append(s.helpBlock), s) : s }), e.settings.classes.inputGroup = ["input-group"], e.settings.classes.inputGroupAddon = ["input-group-addon"], e.settings.classes.inputGroupAddonButton = ["input-group-btn"], e.settings.classes.button = ["btn", "btn-default"], e.registerMutator("addons", function (t, s, n) { if (!s.$addons && !s.addons) return n; n.inputGroup = angular.element("<div/>"), n.inputGroup.addClass(e.settings.classes.inputGroup.join(" ")); var o = []; return angular.forEach(s.$addons || s.addons, function (a) { var i = angular.element("<span/>"), l = null; if (i.addClass(e.settings.classes.inputGroupAddon.join(" ")), a.button && (i.attr("class", e.settings.classes.inputGroupAddonButton.join(" ")), (l = angular.element('<button type="button"/>')).addClass(e.settings.classes.button.join(" ")), i.append(l)), null != a.icon) { var r = angular.element("<i/>"); r.addClass(a.icon), (l || i).append(r) } null != a.content && (l || i).html(a.content), a.attr && e.setAttributes(t, s, l || i, a.attr), a.before ? n.inputGroup.append(i) : o.push(i) }), n.inputGroup.append(n.input), angular.forEach(o, function (e) { n.inputGroup.append(e) }), n.fieldContainer.append(n.inputGroup), n }), e.settings.layout = { type: "basic", labelSize: 2, inputSize: 10 }, e.registerMutator("horizontalForm", function (t, s, n) { if (!t.options.layout || "horizontal" != t.options.layout.type) return t.container.removeClass("form-horizontal"), n; var o = e.settings.classes.col[0], a = e.settings.classes.colOffset[0], i = s.labelSize ? s.labelSize : t.options.layout.labelSize, l = s.inputSize ? s.inputSize : t.options.layout.inputSize; t.container.addClass("form-horizontal"); var r = angular.element("<div/>"); if (r.addClass(o.replace(/\$size/gi, l)), n.label && "checkbox" != s.type ? (n.label.addClass(o.replace(/\$size/gi, i)), n.label.after(r)) : (n.fieldContainer.prepend(r), r.addClass(a.replace(/\$size/g, i))), "checkbox" == s.type) { n.fieldContainer.removeClass("checkbox"); var p = angular.element("<div/>"); p.addClass("checkbox"), p.append(n.label), r.append(p) } else r.append(n.inputGroup || n.input); return s.help && r.append(n.helpBlock), n }, { require: "helpBlock" }) }]), angular.module("autofields.bootstrap.validation", ["autofields.validation"]).config(["$uibTooltipProvider", function (e) { e.setTriggers({ "keyup focus": "blur" }), e.options({ placement: "top", animation: !1 }) }]).config(["$autofieldsProvider", function (e) { e.settings.attributes.container.ngClass = "{'has-error':" + e.settings.validation.invalid + ", 'has-success':" + e.settings.validation.valid + "}", e.settings.attributes.input.uibPopover = "{{(" + e.settings.validation.valid + ") ? '$validMsg' : ($errorMsgs)}}", e.settings.noPopover = ["date"], e.registerMutator("bootstrap-validation", function (t, s, n) { if (!n.validation || -1 != e.settings.noPopover.indexOf(s.type)) return n.input.removeAttr("uib-popover"), n; if (n.msgs.length) { var o = n.input.attr("uib-popover").replace(/\$validMsg/gi, n.validMsg).replace(/\$errorMsgs/gi, n.msgs.join("+")); n.input.attr({ "uib-popover-trigger": "keyup focus", "uib-popover": o }) } else n.input.removeAttr("uib-popover"); return n }, { require: "validation", override: !0 }) }]), angular.module("autofields", ["autofields.bootstrap", "autofields.bootstrap.validation"]);