/**
 * @license Autofields v2.2.5
 * (c) 2018 Justin Maier http://justmaier.github.io/angular-autoFields-bootstrap
 * License: MIT
 */
"use strict"; angular.module("autofields.core", []).provider("$autofields", function () { var t = {}, e = { CamelToTitle: function (t) { return t.replace(/([A-Z])/g, " $1").replace(/^./, function (t) { return t.toUpperCase() }) }, CamelToDash: function (t) { return t.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase() }, LabelText: function (t) { return t.label || e.CamelToTitle(t.property) } }; t.helpers = e, t.settings = { classes: { container: [], input: [], label: [] }, attributes: { container: { class: "$type" }, input: { id: "$property_clean", name: "$property_clean", type: "$type", ngModel: "$data.$property", placeholder: "$placeholder" }, label: {} }, container: '<div class="autofields" ng-form name="$form"></div>', scope: {} }, t.setAttributes = function (t, n, a, r) { angular.forEach(r, function (r, i) { r && "string" == typeof r && (r = r.replace(/\$form/g, t.formStr).replace(/\$schema/g, t.schemaStr).replace(/\$type/g, n.type || "text").replace(/\$property_clean/g, n.property.replace(/\[|\]|\./g, "")).replace(/\$property/g, n.property).replace(/\$data/g, t.dataStr).replace(/\$placeholder/g, null != n.placeholder ? n.placeholder : e.LabelText(n))), a.attr(e.CamelToDash(i), r) }) }; t.field = function (n, r, i, o) { var l, s, u, c, d, p, f, g, m, v, h, $, b, y = { fieldContainer: (v = n, h = r, b = angular.element("<div/>"), $ = angular.extend({}, t.settings.attributes.container, v.options.attributes.container, $), t.setAttributes(v, h, b, $), b.addClass((v.options || t.settings).classes.container.join(" ")), b), label: "" != r.label ? (p = n, f = r, m = angular.element("<label/>"), g = angular.extend({}, t.settings.attributes.label, p.options.attributes.label, g), t.setAttributes(p, f, m, g), m.addClass((p.options || t.settings).classes.label.join(" ")), m.html(e.LabelText(f)), m) : null, input: (l = n, s = r, u = i, c = o, d = angular.element(u), c = angular.extend({}, t.settings.attributes.input, l.options.attributes.input, c, s.attr), t.setAttributes(l, s, d, c), d.addClass((l.options || t.settings).classes.input.join(" ")), d) }; y.fieldContainer.append(y.label).append(y.input); var x = []; return angular.forEach(a, function (t, e) { y = t(n, r, y, x), x.push(e) }), y }, t.updateScope = function (e) { angular.forEach(t.settings.scope, function (t, n) { e[n] = "function" == typeof t ? function () { var n = Array.prototype.slice.call(arguments, 0); n.unshift(e), t.apply(this, n) } : t }) }; var n = {}; t.registerHandler = function (t, e) { t = Array.isArray(t) ? t : [t], angular.forEach(t, function (t) { n[t] = e }) }; var a = {}; return t.registerMutator = function (t, e, n) { a[t] && !n.override || (a[t] = function (r, i, o, l) { if (n && "string" == typeof n.require && -1 == l.indexOf(n.require) && (o = a[n.require]), -1 == l.indexOf(t)) return e(r, i, o) }) }, t.createField = function (t, e, a) { var r = null == e.type ? n.text : n[e.type]; if (null != r) return r(t, e, a); console.warn(e.type + " not supported - field ignored") }, t.$get = function () { return { settings: t.settings, createField: t.createField, updateScope: t.updateScope } }, t }).directive("autoFields", ["$autofields", "$compile", function (t, e) { return { restrict: "E", priority: 1, replace: !0, compile: function () { return function (n, a, r) { var i = { schemaStr: r.fields || r.autoFields, optionsStr: r.options, dataStr: r.data, formStr: r.form || "autofields", classes: r.class, container: null, formScope: null }, o = { extendDeep: function (t) { return angular.forEach(arguments, function (e) { e !== t && angular.forEach(e, function (e, n) { t[n] && t[n].constructor && t[n].constructor === Object ? o.extendDeep(t[n], e) : t[n] = e }) }), t } }; i.options = angular.copy(t.settings); var l = function (a) { a = a || n[i.schemaStr], i.container.html(""), angular.forEach(a, function (e, n) { var a = t.createField(i, e, n); i.container.append(a) }), null != i.formScope && i.formScope.$destroy(), i.formScope = n.$new(), i.formScope.data = n[i.dataStr], i.formScope.fields = a, t.updateScope(i.formScope), e(i.container)(i.formScope) }; n.$watch(i.optionsStr, function (t, e) { o.extendDeep(i.options, t), t !== e && l() }, !0), n.$watch(i.schemaStr, function (t) { l(t) }, !0), n.$watch(i.formStr, function (t) { i.container.attr("name", i.formStr) }), n.$watch(function () { return r.class }, function (t) { i.classes = r.class, i.container.attr("class", i.classes) }), i.container = angular.element(i.options.container), i.container.attr("name", i.formStr), i.container.attr("class", i.classes), a.replaceWith(i.container) } } } }]), angular.module("autofields.standard", ["autofields.core"]).config(["$autofieldsProvider", function (t) { t.settings.fixUrl = !0, t.registerHandler(["text", "email", "url", "date", "number", "password"], function (e, n, a) { var r = t.field(e, n, "<input/>"), i = n.fixUrl ? n.fixUrl : e.options.fixUrl; return "url" == n.type && i && r.input.attr("fix-url", ""), r.fieldContainer }), t.settings.defaultOption = "Select One", t.registerHandler("select", function (e, n, a) { var r = '<select><option value="">' + (n.defaultOption ? n.defaultOption : e.options.defaultOption) + "</option></select>", i = { ngOptions: n.list }; return t.field(e, n, r, i).fieldContainer }), t.settings.textareaRows = 3, t.registerHandler("textarea", function (e, n, a) { var r = n.rows ? n.rows : e.options.textareaRows; return t.field(e, n, "<textarea/>", { rows: r }).fieldContainer }), t.registerHandler("checkbox", function (e, n, a) { var r = t.field(e, n, "<input/>"); return r.label && r.label.prepend(r.input), r.fieldContainer }), t.settings.displayAttributes = (t.settings.displayAttributes || []).concat(["ng-if", "ng-show", "ng-hide"]), t.registerMutator("displayAttributes", function (e, n, a) { return n.attr ? (angular.forEach(t.settings.displayAttributes, function (t) { var e = a.input.attr(t); e && (a.fieldContainer.attr(t, e), a.input.removeAttr(t)) }), a) : a }) }]).directive("fixUrl", [function () { return { restrict: "A", require: "ngModel", link: function (t, e, n, a) { var r = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w\.\-\?\=\&]*)$/i; e.bind("blur", function () { var t = a.$modelValue; null != t && (angular.forEach(a.$formatters, function (e) { t = e(t) }), a.$viewValue = t, a.$render()) }); var i = function (t) { if (r.test(t)) { var e = t.match(r), n = null != e[1] && "" != e[1] ? e[1] : "http://"; n += e[2] + "." + e[3], void 0 !== e[4] && (n += e[4]), t = n } return t }; a.$formatters.push(i), a.$parsers.unshift(i) } } }]), angular.module("autofields.validation", ["autofields.core"]).config(["$autofieldsProvider", function (t) { var e = function (t) { return t.replace(/([A-Z])/g, " $1").replace(/^./, function (t) { return t.toUpperCase() }) }; t.settings.validation = { enabled: !0, showMessages: !0, defaultMsgs: { required: "This field is required", minlength: "This is under minimum length", maxlength: "This exceeds maximum length", min: "This is under the minumum value", max: "This exceeds the maximum value", email: "This is not a valid email address", valid: "" }, invalid: "$form.$property_clean.$invalid && $form.$property_clean.$dirty", valid: "$form.$property_clean.$valid" }, t.settings.attributes.container.ngClass = "{'invalid':" + t.settings.validation.invalid + ", 'valid':" + t.settings.validation.valid + "}", t.registerMutator("validation", function (t, n, a) { return a.validation = t.options.validation.enabled && !1 !== n.validate, a.validation ? (a.msgs = [], t.options.validation.showMessages ? (angular.forEach(angular.extend({}, t.options.validation.defaultMsgs, n.msgs), function (r, i) { if (n.msgs && null != n.msgs[i] || n.type == i || n.attr && (null != n.attr[i] || null != n.attr["ng" + e(i)])) { var o = n.property.replace(/\[|\]|\./g, ""); a.msgs.push("(" + t.formStr + "." + o + ".$error." + i + "? '" + r + "' : '')") } }), a.validMsg = n.msgs && n.msgs.valid ? n.msgs.valid : t.options.validation.defaultMsgs.valid, a.msgs.length, a) : a) : (a.fieldContainer.removeAttr("ng-class"), a) }) }]), angular.module("autofields", ["autofields.standard", "autofields.validation"]), angular.module("autoFields", ["autofields"]);